---
import type { Language } from '../utils/i18n';
import { getTranslation } from '../utils/i18n';
import LanguageSwitcher from './LanguageSwitcher.tsx';

interface Props {
  currentLang: Language;
}

const { currentLang } = Astro.props;

const navItems = [
  { key: 'home', href: '/' },
  { key: 'about', href: '#about' },
  { key: 'services', href: '#services' },
  { key: 'contact', href: '#contact' },
];
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-lg border-b border-gray-200/50 transition-all duration-300" id="navbar">
  <div class="container-custom">
    <div class="flex items-center justify-between h-16 lg:h-20">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-3 rtl:space-x-reverse">
          <div class="w-10 h-10 lg:w-12 lg:h-12 bg-gradient-primary rounded-lg flex items-center justify-center shadow-lg">
            <span class="text-white font-bold text-lg lg:text-xl">A</span>
          </div>
          <div class="hidden sm:block">
            <div class="text-xl lg:text-2xl font-bold text-gray-900">
              {currentLang === 'ar' ? 'أركوم' : 'ARCOM'}
            </div>
            <div class="text-xs lg:text-sm text-gray-600 -mt-1">
              {getTranslation('heroSubtitle', currentLang).split(' - ')[1]?.substring(0, 20) + '...' || 'Excellence Partner'}
            </div>
          </div>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-8 rtl:space-x-reverse">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="text-gray-700 hover:text-primary-600 font-medium transition-colors duration-200 relative group"
          >
            {getTranslation(item.key as keyof typeof import('../utils/i18n').translations, currentLang)}
            <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-primary-500 transition-all duration-300 group-hover:w-full"></span>
          </a>
        ))}
      </div>

      <!-- Right side: Language Switcher & Mobile Menu -->
      <div class="flex items-center space-x-4 rtl:space-x-reverse">
        <!-- Language Switcher -->
        <div class="hidden sm:block">
          <LanguageSwitcher 
            currentLang={currentLang} 
            onLanguageChange={() => {}} 
            client:load 
          />
        </div>

        <!-- CTA Button -->
        <a href="#contact" class="hidden lg:block btn-primary">
          {getTranslation('getStarted', currentLang)}
        </a>

        <!-- Mobile Menu Button -->
        <button 
          id="mobile-menu-button"
          class="md:hidden p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors duration-200"
          aria-label="Toggle menu"
        >
          <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="md:hidden hidden bg-white border-t border-gray-200">
      <div class="px-2 pt-2 pb-3 space-y-1">
        {navItems.map((item) => (
          <a
            href={item.href}
            class="block px-3 py-2 rounded-md text-base font-medium text-gray-700 hover:text-primary-600 hover:bg-gray-50 transition-colors duration-200"
          >
            {getTranslation(item.key as keyof typeof import('../utils/i18n').translations, currentLang)}
          </a>
        ))}
        <div class="pt-4 pb-2">
          <LanguageSwitcher 
            currentLang={currentLang} 
            onLanguageChange={() => {}} 
            client:load 
          />
        </div>
        <div class="pt-2">
          <a href="#contact" class="block w-full text-center btn-primary">
            {getTranslation('getStarted', currentLang)}
          </a>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', function() {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', function() {
        mobileMenu.classList.toggle('hidden');
      });
    }
    
    // Navbar scroll effect
    const navbar = document.getElementById('navbar');
    if (navbar) {
      window.addEventListener('scroll', function() {
        if (window.scrollY > 50) {
          navbar.classList.add('shadow-lg');
          navbar.classList.remove('bg-white/95');
          navbar.classList.add('bg-white');
        } else {
          navbar.classList.remove('shadow-lg');
          navbar.classList.add('bg-white/95');
          navbar.classList.remove('bg-white');
        }
      });
    }
    
    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          // Close mobile menu if open
          if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
            mobileMenu.classList.add('hidden');
          }
        }
      });
    });
  });
</script> 